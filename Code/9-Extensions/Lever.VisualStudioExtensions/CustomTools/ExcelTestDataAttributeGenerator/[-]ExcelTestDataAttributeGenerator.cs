//using System;
//using System.Collections.Generic;
//using System.Data;
//using System.Globalization;
//using System.IO;
//using System.Linq;
//using System.Runtime.InteropServices;
//using System.Text;
//using System.Threading.Tasks;
//using Microsoft.VisualStudio.Shell;

//namespace Meision.VisualStudio.CustomTools
//{
//    [ComVisible(true)]
//    [Guid("B1CED36B-722E-4339-A211-6FD31BFA5102")]
//    [CodeGeneratorRegistration(typeof(ExcelTestDataAttributeGenerator), nameof(ExcelTestDataAttributeGenerator), Constants.CSharpProject, GeneratesDesignTimeSource = true)]
//    [CodeGeneratorRegistration(typeof(ExcelTestDataAttributeGenerator), nameof(ExcelTestDataAttributeGenerator), Constants.DotNetCoreProject, GeneratesDesignTimeSource = true)]
//    [ProvideObject(typeof(ExcelTestDataAttributeGenerator))]
//    public class ExcelTestDataAttributeGenerator : BaseCodeGeneratorWithSite
//    {
//        protected override byte[] GenerateCode(string inputFileContent)
//        {
//            if (!this.InputFilePath.EndsWith(".xlsx"))
//            {
//                this.GeneratorError(1, "Input file should be excel file.", 0, 0);
//                return null;
//            }

//            // Get languages table.
//            DataSet dataSet;
//            using (FileStream stream = new FileStream(this.InputFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
//            {
//                dataSet = EPPlusHelper.ReadExcelToDataSet(stream);
//            }

//            string className = Path.GetFileNameWithoutExtension(this.InputFilePath);
//            // Generate code
//            StringBuilder builder = new StringBuilder();
//            builder.AppendLine(string.Format(System.Globalization.CultureInfo.InvariantCulture, Constants.DO_NOT_MODIFY, this.GetType().Name));
//            builder.AppendLine($"using System;");
//            builder.AppendLine($"using System.Collections.Generic;");
//            builder.AppendLine($"using System.Globalization;");
//            builder.AppendLine($"using System.Reflection;");
//            builder.AppendLine($"using Xunit.Sdk;");
//            builder.AppendLine($"");
//            builder.AppendLine($"namespace {this.CodeNamespace}");
//            builder.AppendLine($"{{");
//            builder.AppendLine($"    public class ExcelTestDataAttribute : DataAttribute");
//            builder.AppendLine($"    {{");
//            builder.AppendLine($"        private Dictionary<string, Func<string, object>> _convertFuncs;");
//            builder.AppendLine($"        public Dictionary<string, Func<string, object>> ConvertFuncs");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            get");
//            builder.AppendLine($"            {{");
//            builder.AppendLine($"                if (this._convertFuncs == null)");
//            builder.AppendLine($"                {{");
//            builder.AppendLine($"                    lock (typeof(ExcelTestDataAttribute))");
//            builder.AppendLine($"                    {{");
//            builder.AppendLine($"                        if (this._convertFuncs == null)");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            this._convertFuncs = new Dictionary<string, Func<string, object>>");
//            builder.AppendLine($"                            {{");
//            builder.AppendLine($"                                {{\"Byte[]\", ToBytes }},");
//            builder.AppendLine($"                                {{\"Byte\", ToByte }},");
//            builder.AppendLine($"                                {{\"Char\", ToChar}},");
//            builder.AppendLine($"                                {{\"DateTime\", ToDateTime}},");
//            builder.AppendLine($"                                {{\"Decimal\", ToDecimal}},");
//            builder.AppendLine($"                                {{\"Double\", ToDouble}},");
//            builder.AppendLine($"                                {{\"Int16\", ToInt16}},");
//            builder.AppendLine($"                                {{\"Int32\", ToInt32}},");
//            builder.AppendLine($"                                {{\"Int64\", ToInt64}},");
//            builder.AppendLine($"                                {{\"SByte\", ToSByte}},");
//            builder.AppendLine($"                                {{\"Single\", ToSingle}},");
//            builder.AppendLine($"                                {{\"String\", ToString}},");
//            builder.AppendLine($"                                {{\"UInt16\", ToUInt16}},");
//            builder.AppendLine($"                                {{\"UInt32\", ToUInt32}},");
//            builder.AppendLine($"                                {{\"UInt64\", ToUInt64}},");
//            builder.AppendLine($"                            }};");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                    }}");
//            builder.AppendLine($"                }}");
//            builder.AppendLine($"");
//            builder.AppendLine($"                return this._convertFuncs;");
//            builder.AppendLine($"            }}");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"");
//            builder.AppendLine($"        #region ConvertMethods");
//            builder.AppendLine($"        protected virtual object ToBytes(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            if ((text.Length % 2) != 0)");
//            builder.AppendLine($"            {{");
//            builder.AppendLine($"                throw new ArgumentException(\"Invalid hex string.\", nameof(text));");
//            builder.AppendLine($"            }}");
//            builder.AppendLine($"");
//            builder.AppendLine($"            byte[] buffer = new byte[text.Length / 2];");
//            builder.AppendLine($"            for (int i = 0; i < text.Length; i += 2)");
//            builder.AppendLine($"            {{");
//            builder.AppendLine($"                byte b;");
//            builder.AppendLine($"                switch (text[i])");
//            builder.AppendLine($"                {{");
//            builder.AppendLine($"                    case '0':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0x00; break;");
//            builder.AppendLine($"                            case '1': b = 0x01; break;");
//            builder.AppendLine($"                            case '2': b = 0x02; break;");
//            builder.AppendLine($"                            case '3': b = 0x03; break;");
//            builder.AppendLine($"                            case '4': b = 0x04; break;");
//            builder.AppendLine($"                            case '5': b = 0x05; break;");
//            builder.AppendLine($"                            case '6': b = 0x06; break;");
//            builder.AppendLine($"                            case '7': b = 0x07; break;");
//            builder.AppendLine($"                            case '8': b = 0x08; break;");
//            builder.AppendLine($"                            case '9': b = 0x09; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0x0A; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0x0B; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0x0C; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0x0D; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0x0E; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0x0F; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case '1':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0x10; break;");
//            builder.AppendLine($"                            case '1': b = 0x11; break;");
//            builder.AppendLine($"                            case '2': b = 0x12; break;");
//            builder.AppendLine($"                            case '3': b = 0x13; break;");
//            builder.AppendLine($"                            case '4': b = 0x14; break;");
//            builder.AppendLine($"                            case '5': b = 0x15; break;");
//            builder.AppendLine($"                            case '6': b = 0x16; break;");
//            builder.AppendLine($"                            case '7': b = 0x17; break;");
//            builder.AppendLine($"                            case '8': b = 0x18; break;");
//            builder.AppendLine($"                            case '9': b = 0x19; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0x1A; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0x1B; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0x1C; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0x1D; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0x1E; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0x1F; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case '2':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0x20; break;");
//            builder.AppendLine($"                            case '1': b = 0x21; break;");
//            builder.AppendLine($"                            case '2': b = 0x22; break;");
//            builder.AppendLine($"                            case '3': b = 0x23; break;");
//            builder.AppendLine($"                            case '4': b = 0x24; break;");
//            builder.AppendLine($"                            case '5': b = 0x25; break;");
//            builder.AppendLine($"                            case '6': b = 0x26; break;");
//            builder.AppendLine($"                            case '7': b = 0x27; break;");
//            builder.AppendLine($"                            case '8': b = 0x28; break;");
//            builder.AppendLine($"                            case '9': b = 0x29; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0x2A; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0x2B; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0x2C; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0x2D; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0x2E; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0x2F; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case '3':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0x30; break;");
//            builder.AppendLine($"                            case '1': b = 0x31; break;");
//            builder.AppendLine($"                            case '2': b = 0x32; break;");
//            builder.AppendLine($"                            case '3': b = 0x33; break;");
//            builder.AppendLine($"                            case '4': b = 0x34; break;");
//            builder.AppendLine($"                            case '5': b = 0x35; break;");
//            builder.AppendLine($"                            case '6': b = 0x36; break;");
//            builder.AppendLine($"                            case '7': b = 0x37; break;");
//            builder.AppendLine($"                            case '8': b = 0x38; break;");
//            builder.AppendLine($"                            case '9': b = 0x39; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0x3A; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0x3B; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0x3C; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0x3D; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0x3E; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0x3F; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case '4':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0x40; break;");
//            builder.AppendLine($"                            case '1': b = 0x41; break;");
//            builder.AppendLine($"                            case '2': b = 0x42; break;");
//            builder.AppendLine($"                            case '3': b = 0x43; break;");
//            builder.AppendLine($"                            case '4': b = 0x44; break;");
//            builder.AppendLine($"                            case '5': b = 0x45; break;");
//            builder.AppendLine($"                            case '6': b = 0x46; break;");
//            builder.AppendLine($"                            case '7': b = 0x47; break;");
//            builder.AppendLine($"                            case '8': b = 0x48; break;");
//            builder.AppendLine($"                            case '9': b = 0x49; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0x4A; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0x4B; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0x4C; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0x4D; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0x4E; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0x4F; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case '5':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0x50; break;");
//            builder.AppendLine($"                            case '1': b = 0x51; break;");
//            builder.AppendLine($"                            case '2': b = 0x52; break;");
//            builder.AppendLine($"                            case '3': b = 0x53; break;");
//            builder.AppendLine($"                            case '4': b = 0x54; break;");
//            builder.AppendLine($"                            case '5': b = 0x55; break;");
//            builder.AppendLine($"                            case '6': b = 0x56; break;");
//            builder.AppendLine($"                            case '7': b = 0x57; break;");
//            builder.AppendLine($"                            case '8': b = 0x58; break;");
//            builder.AppendLine($"                            case '9': b = 0x59; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0x5A; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0x5B; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0x5C; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0x5D; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0x5E; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0x5F; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case '6':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0x60; break;");
//            builder.AppendLine($"                            case '1': b = 0x61; break;");
//            builder.AppendLine($"                            case '2': b = 0x62; break;");
//            builder.AppendLine($"                            case '3': b = 0x63; break;");
//            builder.AppendLine($"                            case '4': b = 0x64; break;");
//            builder.AppendLine($"                            case '5': b = 0x65; break;");
//            builder.AppendLine($"                            case '6': b = 0x66; break;");
//            builder.AppendLine($"                            case '7': b = 0x67; break;");
//            builder.AppendLine($"                            case '8': b = 0x68; break;");
//            builder.AppendLine($"                            case '9': b = 0x69; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0x6A; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0x6B; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0x6C; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0x6D; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0x6E; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0x6F; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case '7':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0x70; break;");
//            builder.AppendLine($"                            case '1': b = 0x71; break;");
//            builder.AppendLine($"                            case '2': b = 0x72; break;");
//            builder.AppendLine($"                            case '3': b = 0x73; break;");
//            builder.AppendLine($"                            case '4': b = 0x74; break;");
//            builder.AppendLine($"                            case '5': b = 0x75; break;");
//            builder.AppendLine($"                            case '6': b = 0x76; break;");
//            builder.AppendLine($"                            case '7': b = 0x77; break;");
//            builder.AppendLine($"                            case '8': b = 0x78; break;");
//            builder.AppendLine($"                            case '9': b = 0x79; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0x7A; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0x7B; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0x7C; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0x7D; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0x7E; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0x7F; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case '8':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0x80; break;");
//            builder.AppendLine($"                            case '1': b = 0x81; break;");
//            builder.AppendLine($"                            case '2': b = 0x82; break;");
//            builder.AppendLine($"                            case '3': b = 0x83; break;");
//            builder.AppendLine($"                            case '4': b = 0x84; break;");
//            builder.AppendLine($"                            case '5': b = 0x85; break;");
//            builder.AppendLine($"                            case '6': b = 0x86; break;");
//            builder.AppendLine($"                            case '7': b = 0x87; break;");
//            builder.AppendLine($"                            case '8': b = 0x88; break;");
//            builder.AppendLine($"                            case '9': b = 0x89; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0x8A; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0x8B; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0x8C; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0x8D; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0x8E; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0x8F; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case '9':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0x90; break;");
//            builder.AppendLine($"                            case '1': b = 0x91; break;");
//            builder.AppendLine($"                            case '2': b = 0x92; break;");
//            builder.AppendLine($"                            case '3': b = 0x93; break;");
//            builder.AppendLine($"                            case '4': b = 0x94; break;");
//            builder.AppendLine($"                            case '5': b = 0x95; break;");
//            builder.AppendLine($"                            case '6': b = 0x96; break;");
//            builder.AppendLine($"                            case '7': b = 0x97; break;");
//            builder.AppendLine($"                            case '8': b = 0x98; break;");
//            builder.AppendLine($"                            case '9': b = 0x99; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0x9A; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0x9B; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0x9C; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0x9D; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0x9E; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0x9F; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case 'a':");
//            builder.AppendLine($"                    case 'A':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0xA0; break;");
//            builder.AppendLine($"                            case '1': b = 0xA1; break;");
//            builder.AppendLine($"                            case '2': b = 0xA2; break;");
//            builder.AppendLine($"                            case '3': b = 0xA3; break;");
//            builder.AppendLine($"                            case '4': b = 0xA4; break;");
//            builder.AppendLine($"                            case '5': b = 0xA5; break;");
//            builder.AppendLine($"                            case '6': b = 0xA6; break;");
//            builder.AppendLine($"                            case '7': b = 0xA7; break;");
//            builder.AppendLine($"                            case '8': b = 0xA8; break;");
//            builder.AppendLine($"                            case '9': b = 0xA9; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0xAA; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0xAB; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0xAC; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0xAD; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0xAE; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0xAF; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case 'b':");
//            builder.AppendLine($"                    case 'B':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0xB0; break;");
//            builder.AppendLine($"                            case '1': b = 0xB1; break;");
//            builder.AppendLine($"                            case '2': b = 0xB2; break;");
//            builder.AppendLine($"                            case '3': b = 0xB3; break;");
//            builder.AppendLine($"                            case '4': b = 0xB4; break;");
//            builder.AppendLine($"                            case '5': b = 0xB5; break;");
//            builder.AppendLine($"                            case '6': b = 0xB6; break;");
//            builder.AppendLine($"                            case '7': b = 0xB7; break;");
//            builder.AppendLine($"                            case '8': b = 0xB8; break;");
//            builder.AppendLine($"                            case '9': b = 0xB9; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0xBA; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0xBB; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0xBC; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0xBD; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0xBE; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0xBF; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case 'c':");
//            builder.AppendLine($"                    case 'C':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0xC0; break;");
//            builder.AppendLine($"                            case '1': b = 0xC1; break;");
//            builder.AppendLine($"                            case '2': b = 0xC2; break;");
//            builder.AppendLine($"                            case '3': b = 0xC3; break;");
//            builder.AppendLine($"                            case '4': b = 0xC4; break;");
//            builder.AppendLine($"                            case '5': b = 0xC5; break;");
//            builder.AppendLine($"                            case '6': b = 0xC6; break;");
//            builder.AppendLine($"                            case '7': b = 0xC7; break;");
//            builder.AppendLine($"                            case '8': b = 0xC8; break;");
//            builder.AppendLine($"                            case '9': b = 0xC9; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0xCA; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0xCB; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0xCC; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0xCD; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0xCE; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0xCF; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case 'd':");
//            builder.AppendLine($"                    case 'D':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0xD0; break;");
//            builder.AppendLine($"                            case '1': b = 0xD1; break;");
//            builder.AppendLine($"                            case '2': b = 0xD2; break;");
//            builder.AppendLine($"                            case '3': b = 0xD3; break;");
//            builder.AppendLine($"                            case '4': b = 0xD4; break;");
//            builder.AppendLine($"                            case '5': b = 0xD5; break;");
//            builder.AppendLine($"                            case '6': b = 0xD6; break;");
//            builder.AppendLine($"                            case '7': b = 0xD7; break;");
//            builder.AppendLine($"                            case '8': b = 0xD8; break;");
//            builder.AppendLine($"                            case '9': b = 0xD9; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0xDA; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0xDB; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0xDC; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0xDD; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0xDE; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0xDF; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case 'e':");
//            builder.AppendLine($"                    case 'E':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0xE0; break;");
//            builder.AppendLine($"                            case '1': b = 0xE1; break;");
//            builder.AppendLine($"                            case '2': b = 0xE2; break;");
//            builder.AppendLine($"                            case '3': b = 0xE3; break;");
//            builder.AppendLine($"                            case '4': b = 0xE4; break;");
//            builder.AppendLine($"                            case '5': b = 0xE5; break;");
//            builder.AppendLine($"                            case '6': b = 0xE6; break;");
//            builder.AppendLine($"                            case '7': b = 0xE7; break;");
//            builder.AppendLine($"                            case '8': b = 0xE8; break;");
//            builder.AppendLine($"                            case '9': b = 0xE9; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0xEA; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0xEB; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0xEC; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0xED; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0xEE; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0xEF; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    case 'f':");
//            builder.AppendLine($"                    case 'F':");
//            builder.AppendLine($"                        switch (text[i + 1])");
//            builder.AppendLine($"                        {{");
//            builder.AppendLine($"                            case '0': b = 0xF0; break;");
//            builder.AppendLine($"                            case '1': b = 0xF1; break;");
//            builder.AppendLine($"                            case '2': b = 0xF2; break;");
//            builder.AppendLine($"                            case '3': b = 0xF3; break;");
//            builder.AppendLine($"                            case '4': b = 0xF4; break;");
//            builder.AppendLine($"                            case '5': b = 0xF5; break;");
//            builder.AppendLine($"                            case '6': b = 0xF6; break;");
//            builder.AppendLine($"                            case '7': b = 0xF7; break;");
//            builder.AppendLine($"                            case '8': b = 0xF8; break;");
//            builder.AppendLine($"                            case '9': b = 0xF9; break;");
//            builder.AppendLine($"                            case 'a': case 'A': b = 0xFA; break;");
//            builder.AppendLine($"                            case 'b': case 'B': b = 0xFB; break;");
//            builder.AppendLine($"                            case 'c': case 'C': b = 0xFC; break;");
//            builder.AppendLine($"                            case 'd': case 'D': b = 0xFD; break;");
//            builder.AppendLine($"                            case 'e': case 'E': b = 0xFE; break;");
//            builder.AppendLine($"                            case 'f': case 'F': b = 0xFF; break;");
//            builder.AppendLine($"                            default: throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i + 1]), nameof(text));");
//            builder.AppendLine($"                        }}");
//            builder.AppendLine($"                        break;");
//            builder.AppendLine($"                    default:");
//            builder.AppendLine($"                        throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, \"Fail to parse hex string for '{{0}}'.\", text[i]), nameof(text));");
//            builder.AppendLine($"                }}");
//            builder.AppendLine($"");
//            builder.AppendLine($"                buffer[i / 2] = b;");
//            builder.AppendLine($"            }}");
//            builder.AppendLine($"            return buffer;");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToByte(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToByte(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToChar(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToChar(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToDateTime(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToDateTime(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToDecimal(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToDecimal(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToDouble(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToDouble(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToInt16(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToInt16(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToInt32(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToInt32(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToInt64(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToInt64(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToSByte(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToSByte(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToSingle(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToSingle(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToString(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToString(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToUInt16(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToUInt16(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToUInt32(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToUInt32(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        protected virtual object ToUInt64(string text)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            return Convert.ToUInt64(text);");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"        #endregion ConvertMethods");
//            builder.AppendLine($"");
//            builder.AppendLine($"        public override IEnumerable<object[]> GetData(MethodInfo testMethod)");
//            builder.AppendLine($"        {{");
//            builder.AppendLine($"            ParameterInfo[] parameters = testMethod.GetParameters();");
//            builder.AppendLine($"            switch ($\"{{testMethod.DeclaringType}}.{{testMethod.Name}}\")");
//            builder.AppendLine($"            {{");
//            foreach (DataTable table in dataSet.Tables)
//            {
//                builder.AppendLine($"                case \"{table.TableName}\":");
//                foreach (DataRow row in table.Rows)
//                {
//                    builder.AppendLine($"                    yield return new object[] ");
//                    builder.AppendLine($"                    {{");
//                    for (int i = 0; i < table.Columns.Count; i++)
//                    {
//                        string text = ((string)row[i]).Replace("\"", "\"\"");
//                        builder.AppendLine($"                        ConvertFuncs[parameters[{i}].ParameterType.Name](@\"{text}\"),");
//                    }
//                    builder.AppendLine($"                    }};");
//                }
//                builder.AppendLine($"                    yield break;");
//            }
//            builder.AppendLine($"                default:");
//            builder.AppendLine($"                    yield break;");
//            builder.AppendLine($"            }}");
//            builder.AppendLine($"        }}");
//            builder.AppendLine($"    }}");
//            builder.AppendLine($"}}");
//            builder.AppendLine($"");

//            string code = builder.ToString();
//            return Encoding.UTF8.GetBytes(code);
//        }
//    }
//}
